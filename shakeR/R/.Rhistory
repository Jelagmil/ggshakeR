lineend = "round", size = 1.5, arrow=arrow(length=unit(0.10, "inches"))), stat="identity", position )+
facet_grid(~colorOutcome) +
labs(
color = "Outcome of Pass"
)
}
plot
}
#' Plotting passes
#'
#' This function allows you to plot various types of plots that have
#' that have passes as some sort of input. Returns a ggplot object.
#' @param pass_data The dataframe that stores your passing data
#' @param standard TRUE if only plotting successful/unsuccessful passes
#' @param background Pick between white or dark background.
#' @param prog indicates whether to have progressive passes
#' @example
#' plot = plot_pass(passingdata, standard="st", background = "dark")
#' @export
plot_pass <- function(pass_data, standard="", prog = "", team="", player="", background=""){
if(team != "" && player != ""){
pass_data = pass_data %>%
filter(team.name == team) %>%
filter(player.name == player)
}
else if(team != "" && player == ""){
pass_data = pass_data %>%
filter(team.name == team)
}
else if(player != ""  && team == ""){
pass_data = pass_data %>%
filter(player.name == player)
}
if(standard=="st"){
pass_data$pass.outcome.name = replace_na(pass_data$pass.outcome.name, "Successful")
pass_data = pass_data %>% mutate(colorOutcome = ifelse(pass.outcome.name == "Successful",
"S",
"US"))
}
if(prog == "prog"){
pass_data = pass_data %>%
mutate(start= sqrt((100-location.x)^2 + (50-location.y)^2)) %>%
mutate(end = sqrt((100-pass.end_location.x)^2 + (50-pass.end_location.y)^2)) %>%
mutate(isProg = ifelse(end <= 0.75*start,
1,
0)) %>%
filter(isProg == 1)
}
if(nrow(pass_data) > 0){
colour_b = "black"
fill_b = "white"
if(background == "dark"){
colour_b = "white"
fill_b = "#141622"
}
plot = ggplot(data=pass_data) +
annotate_pitch(dimensions = pitch_statsbomb,colour=colour_b,
fill = fill_b)+
theme_pitch()+
theme(panel.background = element_rect(fill = fill_b))
plot+
layer(geom=geom_segment(aes(x=location.x,y=location.y,
xend=pass.end_location.x, yend=(pass.end_location.y), color=colorOutcome),
lineend = "round", size = 1.5, arrow=arrow(length=unit(0.10, "inches"))), stat="identity", position )+
facet_grid(~colorOutcome) +
labs(
color = "Outcome of Pass"
)
}
plot
}
plot = plot_pass(passdata,standard="st",team="Barcelona",player="Lionel Andrés Messi Cuccittini",background="dark")
plot
#' Plotting passes
#'
#' This function allows you to plot various types of plots that have
#' that have passes as some sort of input. Returns a ggplot object.
#' @param pass_data The dataframe that stores your passing data
#' @param standard TRUE if only plotting successful/unsuccessful passes
#' @param background Pick between white or dark background.
#' @param prog indicates whether to have progressive passes
#' @example
#' plot = plot_pass(passingdata, standard="st", background = "dark")
#' @export
plot_pass <- function(pass_data, standard="", prog = "", team="", player="", background=""){
if(team != "" && player != ""){
pass_data = pass_data %>%
filter(team.name == team) %>%
filter(player.name == player)
}
else if(team != "" && player == ""){
pass_data = pass_data %>%
filter(team.name == team)
}
else if(player != ""  && team == ""){
pass_data = pass_data %>%
filter(player.name == player)
}
if(standard=="st"){
pass_data$pass.outcome.name = replace_na(pass_data$pass.outcome.name, "Successful")
pass_data = pass_data %>% mutate(colorOutcome = ifelse(pass.outcome.name == "Successful",
"S",
"US"))
}
if(prog == "prog"){
pass_data = pass_data %>%
mutate(start= sqrt((100-location.x)^2 + (50-location.y)^2)) %>%
mutate(end = sqrt((100-pass.end_location.x)^2 + (50-pass.end_location.y)^2)) %>%
mutate(isProg = ifelse(end <= 0.75*start,
1,
0)) %>%
filter(isProg == 1)
}
if(nrow(pass_data) > 0){
colour_b = "black"
fill_b = "white"
if(background == "dark"){
colour_b = "white"
fill_b = "#141622"
}
plot = ggplot(data=pass_data) +
annotate_pitch(dimensions = pitch_statsbomb,colour=colour_b,
fill = fill_b)+
theme_pitch()+
theme(panel.background = element_rect(fill = fill_b))
plot+
layer(geom=geom_segment(aes(x=location.x,y=location.y,
xend=pass.end_location.x, yend=(pass.end_location.y), color=colorOutcome),
lineend = "round", size = 1.5, arrow=arrow(length=unit(0.10, "inches"))), stat="identity", position=1)+
facet_grid(~colorOutcome) +
labs(
color = "Outcome of Pass"
)
}
plot
}
plot = plot_pass(passdata,standard="st",team="Barcelona",player="Lionel Andrés Messi Cuccittini",background="dark")
#' Plotting passes
#'
#' This function allows you to plot various types of plots that have
#' that have passes as some sort of input. Returns a ggplot object.
#' @param pass_data The dataframe that stores your passing data
#' @param standard TRUE if only plotting successful/unsuccessful passes
#' @param background Pick between white or dark background.
#' @param prog indicates whether to have progressive passes
#' @example
#' plot = plot_pass(passingdata, standard="st", background = "dark")
#' @export
plot_pass <- function(pass_data, standard="", prog = "", team="", player="", background=""){
if(team != "" && player != ""){
pass_data = pass_data %>%
filter(team.name == team) %>%
filter(player.name == player)
}
else if(team != "" && player == ""){
pass_data = pass_data %>%
filter(team.name == team)
}
else if(player != ""  && team == ""){
pass_data = pass_data %>%
filter(player.name == player)
}
if(standard=="st"){
pass_data$pass.outcome.name = replace_na(pass_data$pass.outcome.name, "Successful")
pass_data = pass_data %>% mutate(colorOutcome = ifelse(pass.outcome.name == "Successful",
"S",
"US"))
}
if(prog == "prog"){
pass_data = pass_data %>%
mutate(start= sqrt((100-location.x)^2 + (50-location.y)^2)) %>%
mutate(end = sqrt((100-pass.end_location.x)^2 + (50-pass.end_location.y)^2)) %>%
mutate(isProg = ifelse(end <= 0.75*start,
1,
0)) %>%
filter(isProg == 1)
}
if(nrow(pass_data) > 0){
colour_b = "black"
fill_b = "white"
if(background == "dark"){
colour_b = "white"
fill_b = "#141622"
}
plot = ggplot(data=pass_data) +
annotate_pitch(dimensions = pitch_statsbomb,colour=colour_b,
fill = fill_b)+
theme_pitch()+
theme(panel.background = element_rect(fill = fill_b))
plot+
layer(geom=geom_segment(aes(x=location.x,y=location.y,
xend=pass.end_location.x, yend=(pass.end_location.y), color=colorOutcome),
lineend = "round", size = 1.5, arrow=arrow(length=unit(0.10, "inches"))),stat = "identity")+
facet_grid(~colorOutcome) +
labs(
color = "Outcome of Pass"
)
}
plot
}
plot = plot_pass(passdata,standard="st",team="Barcelona",player="Lionel Andrés Messi Cuccittini",background="dark")
#' Plotting passes
#'
#' This function allows you to plot various types of plots that have
#' that have passes as some sort of input. Returns a ggplot object.
#' @param pass_data The dataframe that stores your passing data
#' @param standard TRUE if only plotting successful/unsuccessful passes
#' @param background Pick between white or dark background.
#' @param prog indicates whether to have progressive passes
#' @example
#' plot = plot_pass(passingdata, standard="st", background = "dark")
#' @export
plot_pass <- function(pass_data, standard="", prog = "", team="", player="", background=""){
if(team != "" && player != ""){
pass_data = pass_data %>%
filter(team.name == team) %>%
filter(player.name == player)
}
else if(team != "" && player == ""){
pass_data = pass_data %>%
filter(team.name == team)
}
else if(player != ""  && team == ""){
pass_data = pass_data %>%
filter(player.name == player)
}
if(standard=="st"){
pass_data$pass.outcome.name = replace_na(pass_data$pass.outcome.name, "Successful")
pass_data = pass_data %>% mutate(colorOutcome = ifelse(pass.outcome.name == "Successful",
"S",
"US"))
}
if(prog == "prog"){
pass_data = pass_data %>%
mutate(start= sqrt((100-location.x)^2 + (50-location.y)^2)) %>%
mutate(end = sqrt((100-pass.end_location.x)^2 + (50-pass.end_location.y)^2)) %>%
mutate(isProg = ifelse(end <= 0.75*start,
1,
0)) %>%
filter(isProg == 1)
}
if(nrow(pass_data) > 0){
colour_b = "black"
fill_b = "white"
if(background == "dark"){
colour_b = "white"
fill_b = "#141622"
}
plot = ggplot(data=pass_data) +
annotate_pitch(dimensions = pitch_statsbomb,colour=colour_b,
fill = fill_b)+
theme_pitch()+
theme(panel.background = element_rect(fill = fill_b))
plot+
layer(geom=geom_segment(aes(x=location.x,y=location.y,
xend=pass.end_location.x, yend=(pass.end_location.y), color=colorOutcome),
lineend = "round", size = 1.5, arrow=arrow(length=unit(0.10, "inches"))),stat = "identity",position=1)+
facet_grid(~colorOutcome) +
labs(
color = "Outcome of Pass"
)
}
plot
}
plot = plot_pass(passdata,standard="st",team="Barcelona",player="Lionel Andrés Messi Cuccittini",background="dark")
setwd("C:/Abhishek's Folder/R/shakeR/shakeR/R")
library(understatr)
library(tidyverse)
library(ggrepel)
library(gghighlight)
shot_data = get_player_shots(player_id = 7768)
plot = plot_scatter(shot_data,
scatter_x="X",
scatter_y="Y",
sc_label="situation",
set_size_var = "xG",
set_color_var = "shotType")
plot_scatter <- function(data, scatter_x="", scatter_y="", sc_label="",
set_size_num=5, set_size_var="",
set_color_num="red", set_color_var="",
filter_name="", filter_name_value="",
filter_num_value=-100000){
selection = c(scatter_x,scatter_y)
renaming = c('scatter_x','scatter_y')
total=2
if(sc_label != ""){
selection = append(selection, sc_label)
renaming = append(renaming, 'sc_label')
total = total+1
}
if(set_size_var != ""){
selection = append(selection, set_size_var)
renaming = append(renaming, 'set_size_var')
total = total+1
}
if(set_color_var != ""){
selection = append(selection, set_color_var)
renaming = append(renaming, 'set_color_var')
total = total+1
}
if(filter_name != ""){
if(!(filter_name %in% selection)){
selection = append(selection, filter_name)
renaming = append(renaming, 'filter_name')
total = total+1
}
}
data = data %>%
select(c(selection))
print(names(data))
for(i in 1:total){
names(data)[i] = renaming[i]
}
if(filter_name != ""){
if(filter_name_value != ""){
data = data %>%
filter(filter_name == filter_value)
}
}
plot = data %>%
ggplot(aes(x=scatter_x,y=scatter_y))
if(set_size_var != "" && set_color_var != ""){
plot = plot+
geom_point(aes(size=set_size_var, color=set_color_var))
}
else if(set_size_var == "" && set_color_var != ""){
plot = plot+
geom_point(aes(color=set_color_var),size=set_size_num)
}
else if(set_size_var != "" && set_color_var == ""){
plot = plot+
geom_point(aes(size=set_size_var),color=set_color_num)
}
else if(set_size_var == "" && set_color_var == ""){
plot = plot+
geom_point(size=set_size_num,color=set_color_num)
}
if(sc_label != ""){
plot =  plot +
geom_label_repel(aes(x=scatter_x,y=scatter_y, label=sc_label))
}
plot = plot +
theme_classic()
plot
}
plot_scatter <- function(data, scatter_x="", scatter_y="", sc_label="",
set_size_num=5, set_size_var="",
set_color_num="red", set_color_var="",
filter_name="", filter_name_value="",
filter_num_value=-100000){
selection = c(scatter_x,scatter_y)
renaming = c('scatter_x','scatter_y')
total=2
if(sc_label != ""){
selection = append(selection, sc_label)
renaming = append(renaming, 'sc_label')
total = total+1
}
if(set_size_var != ""){
selection = append(selection, set_size_var)
renaming = append(renaming, 'set_size_var')
total = total+1
}
if(set_color_var != ""){
selection = append(selection, set_color_var)
renaming = append(renaming, 'set_color_var')
total = total+1
}
if(filter_name != ""){
if(!(filter_name %in% selection)){
selection = append(selection, filter_name)
renaming = append(renaming, 'filter_name')
total = total+1
}
}
data = data %>%
select(c(selection))
print(names(data))
for(i in 1:total){
names(data)[i] = renaming[i]
}
if(filter_name != ""){
if(filter_name_value != ""){
data = data %>%
filter(filter_name == filter_value)
}
}
plot = data %>%
ggplot(aes(x=scatter_x,y=scatter_y))
if(set_size_var != "" && set_color_var != ""){
plot = plot+
geom_point(aes(size=set_size_var, color=set_color_var))
}
else if(set_size_var == "" && set_color_var != ""){
plot = plot+
geom_point(aes(color=set_color_var),size=set_size_num)
}
else if(set_size_var != "" && set_color_var == ""){
plot = plot+
geom_point(aes(size=set_size_var),color=set_color_num)
}
else if(set_size_var == "" && set_color_var == ""){
plot = plot+
geom_point(size=set_size_num,color=set_color_num)
}
if(sc_label != ""){
plot =  plot +
geom_label_repel(aes(x=scatter_x,y=scatter_y, label=sc_label))
}
plot = plot +
theme_classic()
plot
}
plot = plot_scatter(shot_data,
scatter_x="X",
scatter_y="Y",
sc_label="situation",
set_size_var = "xG",
set_color_var = "shotType")
plot
plot_scatter <- function(data, scatter_x="", scatter_y="", sc_label="",
set_size_num=5, set_size_var="",
set_color_num="red", set_color_var="",
filter_name="", filter_name_value="",
filter_num_value=-100000,
theme = "classic"){
selection = c(scatter_x,scatter_y)
renaming = c('scatter_x','scatter_y')
total=2
if(sc_label != ""){
selection = append(selection, sc_label)
renaming = append(renaming, 'sc_label')
total = total+1
}
if(set_size_var != ""){
selection = append(selection, set_size_var)
renaming = append(renaming, 'set_size_var')
total = total+1
}
if(set_color_var != ""){
selection = append(selection, set_color_var)
renaming = append(renaming, 'set_color_var')
total = total+1
}
if(filter_name != ""){
if(!(filter_name %in% selection)){
selection = append(selection, filter_name)
renaming = append(renaming, 'filter_name')
total = total+1
}
}
data = data %>%
select(c(selection))
print(names(data))
for(i in 1:total){
names(data)[i] = renaming[i]
}
if(filter_name != ""){
if(filter_name_value != ""){
data = data %>%
filter(filter_name == filter_value)
}
}
plot = data %>%
ggplot(aes(x=scatter_x,y=scatter_y))
if(set_size_var != "" && set_color_var != ""){
plot = plot+
geom_point(aes(size=set_size_var, color=set_color_var))
}
else if(set_size_var == "" && set_color_var != ""){
plot = plot+
geom_point(aes(color=set_color_var),size=set_size_num)
}
else if(set_size_var != "" && set_color_var == ""){
plot = plot+
geom_point(aes(size=set_size_var),color=set_color_num)
}
else if(set_size_var == "" && set_color_var == ""){
plot = plot+
geom_point(size=set_size_num,color=set_color_num)
}
if(sc_label != ""){
plot =  plot +
geom_label_repel(aes(x=scatter_x,y=scatter_y, label=sc_label))
}
if(theme == "classic"){
plot = plot +
theme_classic()
}
else if(theme == "minimal"){
plot = plot +
theme_minimal()
}
else if(theme == "grey"){
plot = plot +
theme_grey()
}
else if(theme == "bw"){
plot = plot +
theme_bw()
}
plot
}
plot = plot_scatter(shot_data,
scatter_x="X",
scatter_y="Y",
sc_label="situation",
set_size_var = "xG",
set_color_var = "shotType",
theme = "minimal")
plot
devtools::install_github('cttobin/ggthemr')
